import "comparison"
import "control"
import "destructuring"
import "io"
import "lists"
import "strings"


def split (the-string delimiter)
  set index (find the-string delimiter)
  if (equal index -1)
    raise "Delimiter not found"

  set start (substr the-string 0 index)
  set delimiter-size (strlen delimiter)
  set end
    substr the-string (+ index delimiter-size) (strlen the-string)

  return (list start end)

export split


def handle-error (e)
  if (equal
        (error-value e)
        "EOF")
    return (true "")
    raise e


def read-all-chain (accumulated)
  set-many (eof value)
    guard
      handle-error
      lambda ()
        list false (input "")

  if eof
    return (reverse accumulated)

  set next-accumulated
    prepend value accumulated

  return (read-all-chain next-accumulated)


def read-all ()
  return (read-all-chain nil)


export read-all


def map-helper (map-func values index result)
  if (not values)
    return (reverse result)

  set current (first values)
  set next-values (rest values)
  set map-value (map-func index current)
  set next-index (+ 1 index)
  set next-result (prepend map-value result)

  return (map-helper map-func next-values next-index next-result)


def map-with-index (map-func values)
  return (map-helper map-func values 0 nil)


def replace-index (the-list index new-value)
  def helper (current-index value)
    if (equal current-index index)
      return new-value
      return value

  return (map-with-index helper the-list)


export replace-index


def compare-lists (a b)
  if (and
        not a
        not b)
    return 0

  if (or
        not a
        not b)
    raise "Tuples are not of equal length"

  set a-item (first a)
  set b-item (first b)
  set comparison (smart-compare a-item b-item)

  switch
    case (equal comparison 1)
      return 1
    case (equal comparison 0)
      return
        compare-lists (rest a) (rest b)
    case (equal comparison -1)
      return -1
    default
      raise "not reachable"


def smart-compare (a b)
  if (and
        equal (type a) "list"
        equal (type b) "list")
    return (compare-lists a b)
    return (compare a b)


def smart-le (a b)
  set comparison (smart-compare a b)
  return (or
            equal comparison -1
            equal comparison 0)


def maybe-next-two (the-list)
  if (equal the-list nil)
    return
      list nil nil nil

  set a (first the-list)
  set after-a (rest the-list)

  if (equal after-a nil)
    return
      list a nil nil

  set b (first after-a)
  set after-b (rest after-a)
  return
    list a b after-b


def merge-pending (pending finished)
  if pending
    block
      set-many (a b next-pending) (maybe-next-two pending)
      return
        merge a b nil next-pending finished

  if (equal
        rest finished
        nil)
    return (first finished)

  return
    merge-pending finished nil


def choose-first (a b)
  if (not a)
    return false

  if (not b)
    return true

  set a-value (first a)
  set b-value (first b)
  return (smart-le a-value b-value)


def merge (a b accumulated pending finished)
  if (not
        or a b)
    return
      merge-pending pending
        prepend (reverse accumulated) finished

  if (choose-first a b)
    return
      merge (rest a) b
        prepend (first a) accumulated
        pending
        finished
    return
      merge a (rest b)
        prepend (first b) accumulated
        pending
        finished


def sorted-pair (a b)
  if (smart-le a b)
    return (list a b)
    return (list b a)


def split-pairs (remaining pairs)
  if (not remaining)
    return pairs

  set a (first remaining)
  set a-after (rest remaining)

  if (not a-after)
    return
      prepend (list a) pairs

  set b (first a-after)
  set b-after (rest a-after)
  set next-pairs
    prepend (sorted-pair a b) pairs

  return
    split-pairs b-after next-pairs


def tail-sort (values)
  set pending (split-pairs values nil)
  return
    merge-pending pending nil


export tail-sort
